import { association, Factory } from 'ember-cli-mirage';

import { CollectionSubmissionReviewStates } from 'ember-osf-web/models/collection-submission';
import CollectionSubmissionAction,
{
    CollectionSubmissionActionTrigger,
} from 'ember-osf-web/models/collection-submission-action';


/**
 * MirageCollectionSubmissionAction
 *
 * @description Used to extend the CollectionSubmissionAction model to provide
 * additional functionality for automatically building the collection
 * submission action
 */
export interface MirageCollectionSubmissionAction extends CollectionSubmissionAction {
    /**
     * The reviewsState of the collection submission review state of the
     * target
     */
    reviewsState: CollectionSubmissionReviewStates;
    /**
     * The isAdminRemove determines if the project is removed by the
     * project admin or the moderation collector
     */
    isAdminRemove: boolean;
    /**
     * The isResubmit determines if the autogenerated remove should have a
     * submit post-action
     */
    isResubmit: boolean;
    /**
     * The isAutogenerated determines if the collection submission action is
     * generated by the collection submission parent or by an explicit call.
     */
    isAutogenerated: boolean;
}

export default Factory.extend<MirageCollectionSubmissionAction>({
    auto: false,
    visible: true,
    creator: association() as CollectionSubmissionAction['creator'],
    target: association() as CollectionSubmissionAction['target'],
    afterCreate(collectionSubmissionAction, server) {
        if (!collectionSubmissionAction.dateCreated) {
            collectionSubmissionAction.update({dateCreated: getMinusDate(5)});
        }

        if (!collectionSubmissionAction.dateModified) {
            collectionSubmissionAction.update({
                dateModified: getAddedDate(
                    3, new Date(collectionSubmissionAction.dateCreated),
                ),
            });
        }

        if (collectionSubmissionAction.isAutogenerated) {
            if(collectionSubmissionAction.reviewsState === CollectionSubmissionReviewStates.Accepted) {
                if (!collectionSubmissionAction.comment) {
                    collectionSubmissionAction.update({comment: 'I really love this project.'});
                }
                collectionSubmissionAction.update({actionTrigger: CollectionSubmissionActionTrigger.Accept});

                collectionSubmissionAction.update({fromState: CollectionSubmissionReviewStates.Pending});

                collectionSubmissionAction.update({toState: CollectionSubmissionReviewStates.Accepted});

                server.create('collection-submission-action', {
                    reviewsState: CollectionSubmissionReviewStates.Pending,
                    target: collectionSubmissionAction.target,
                    creator: collectionSubmissionAction.creator,
                    dateCreated: getMinusDate(10, new Date(collectionSubmissionAction.dateCreated)),
                    isAutogenerated: true,
                });
            } else if(collectionSubmissionAction.reviewsState === CollectionSubmissionReviewStates.Rejected) {
                collectionSubmissionAction.update({actionTrigger: CollectionSubmissionActionTrigger.Reject});

                collectionSubmissionAction.update({fromState: CollectionSubmissionReviewStates.Pending});

                collectionSubmissionAction.update({toState: CollectionSubmissionReviewStates.Rejected});

                server.create('collection-submission-action', {
                    reviewsState: CollectionSubmissionReviewStates.Pending,
                    target: collectionSubmissionAction.target,
                    creator: collectionSubmissionAction.creator,
                    dateCreated: getMinusDate(10, new Date(collectionSubmissionAction.dateCreated)),
                    isAutogenerated: true,
                });


            }  else if(collectionSubmissionAction.reviewsState === CollectionSubmissionReviewStates.Removed) {

                const comment = collectionSubmissionAction.isAdminRemove ?
                    'I am making my project private' :
                    'This project is no longer relevant';

                const trigger = collectionSubmissionAction.isAdminRemove ?
                    CollectionSubmissionActionTrigger.AdminRemove : CollectionSubmissionActionTrigger.ModeratorRemove;

                collectionSubmissionAction.update({comment});

                collectionSubmissionAction.update({actionTrigger: trigger});

                collectionSubmissionAction.update({fromState: CollectionSubmissionReviewStates.InProgress});

                collectionSubmissionAction.update({toState: CollectionSubmissionReviewStates.Pending});

                server.create('collection-submission-action', {
                    reviewsState: CollectionSubmissionReviewStates.Pending,
                    target: collectionSubmissionAction.target,
                    creator: collectionSubmissionAction.creator,
                    dateCreated: getMinusDate(20, new Date(collectionSubmissionAction.dateCreated)),
                    isAutogenerated: true,
                });

                server.create('collection-submission-action', {
                    reviewsState: CollectionSubmissionReviewStates.Accepted,
                    target: collectionSubmissionAction.target,
                    creator: collectionSubmissionAction.creator,
                    comment: collectionSubmissionAction.comment,
                    dateCreated: getMinusDate(10, new Date(collectionSubmissionAction.dateCreated)),
                    isAutogenerated: true,
                });

                if (collectionSubmissionAction.isResubmit) {
                    server.create('collection-submission-action', {
                        reviewsState: CollectionSubmissionReviewStates.Pending,
                        target: collectionSubmissionAction.target,
                        creator: collectionSubmissionAction.creator,
                        comment: collectionSubmissionAction.comment,
                        dateCreated: getAddedDate(5, new Date(collectionSubmissionAction.dateCreated)),
                        isAutogenerated: true,
                    });
                }


            }  else if(collectionSubmissionAction.reviewsState === CollectionSubmissionReviewStates.Pending) {

                collectionSubmissionAction.update({actionTrigger: CollectionSubmissionActionTrigger.Submit});

                collectionSubmissionAction.update({fromState: CollectionSubmissionReviewStates.InProgress});

                collectionSubmissionAction.update({toState: CollectionSubmissionReviewStates.Pending});
            }
        } else {
            collectionSubmissionAction.update({comment: collectionSubmissionAction.comment});

            collectionSubmissionAction.update({actionTrigger: collectionSubmissionAction.actionTrigger });

            collectionSubmissionAction.update({fromState: collectionSubmissionAction.fromState});

            collectionSubmissionAction.update({toState: collectionSubmissionAction.toState});

        }
    },
});

declare module 'ember-cli-mirage/types/registries/model' {
    export default interface MirageModelRegistry {
        'collection-submission-action': MirageCollectionSubmissionAction;
    } // eslint-disable-line semi
}

declare module 'ember-cli-mirage/types/registries/schema' {
    export default interface MirageSchemaRegistry {
        'collection-submission-action': MirageCollectionSubmissionAction;
    } // eslint-disable-line semi
}

/**
 * getMinusDate
 *
 * @description: A function to subtract a number of days from either now() or the passed in date
 * @param days The days to subtracted
 * @param currentDate The optional date to subtract from. Default is now()
 *
 * @returns a new date based on the days minused
 */
function getMinusDate(days: number, currentDate?: Date): Date {
    if (!currentDate) {
        currentDate = new Date(Date.now());
    }
    return new Date(Date.now() - 60 * 60 * 24 * days * 1000);
}

/**
 * getAddedDate
 *
 * @description: A function to add a number of days from either now() or the passed in date
 * @param days The days to add
 * @param currentDate The optional date to add to. Default is now()
 *
 * @returns a new date based on the days added
 */
function getAddedDate(days: number, currentDate?: Date): Date {
    if (!currentDate) {
        currentDate = new Date(Date.now());
    }
    return new Date(
        currentDate.getTime() + 60 * 60 * 24 * days * 1000,
    );
}
