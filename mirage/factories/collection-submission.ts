import { Factory, ModelInstance } from 'ember-cli-mirage';
import faker from 'faker';

import CollectionSubmission, { CollectionSubmissionReviewStates } from 'ember-osf-web/models/collection-submission';
import UserModel from 'ember-osf-web/models/user';

import { guid, guidAfterCreate } from './utils';

export interface MirageSubmissionAction {
    comment?: string;
    dateCreated?: Date;
    dateModified?: Date;
    isResubmit?: boolean;
    isAdminRemove?: boolean;
    isAutogenerated?: boolean;
}

export interface MirageCollectionSubmission extends CollectionSubmission {
    submissionAction: MirageSubmissionAction;
}

export default Factory.extend<MirageCollectionSubmission>({
    id: guid('collection-submission'),
    afterCreate(collectionSubmission, server) {
        guidAfterCreate(collectionSubmission, server);
        if (!collectionSubmission.reviewsState) {
            const reviewsState = CollectionSubmissionReviewStates.Accepted;
            collectionSubmission.update({ reviewsState});
        }
        if (!collectionSubmission.collectedType) {
            const collectedType = faker.random.arrayElement(collectionSubmission.collection.collectedTypeChoices);
            collectionSubmission.update({ collectedType });
        }
        if (!collectionSubmission.issue) {
            const issue = faker.random.arrayElement(collectionSubmission.collection.issueChoices);
            collectionSubmission.update({ issue });
        }
        if (!collectionSubmission.programArea) {
            const programArea = faker.random.arrayElement(collectionSubmission.collection.programAreaChoices);
            collectionSubmission.update({ programArea });
        }
        if (!collectionSubmission.status) {
            const status = faker.random.arrayElement(collectionSubmission.collection.statusChoices);
            collectionSubmission.update({ status });
        }
        if (!collectionSubmission.volume) {
            const volume = faker.random.arrayElement(collectionSubmission.collection.volumeChoices);
            collectionSubmission.update({ volume });
        }
        if (!collectionSubmission.studyDesign) {
            const studyDesign = faker.random.arrayElement(collectionSubmission.collection.studyDesignChoices);
            collectionSubmission.update({ studyDesign });
        }
        if (!collectionSubmission.schoolType) {
            const schoolType = faker.random.arrayElement(collectionSubmission.collection.schoolTypeChoices);
            collectionSubmission.update({ schoolType });
        }
        server.create('collection-submission-action', {
            target: collectionSubmission,
            reviewsState: collectionSubmission.reviewsState,
            comment: collectionSubmission.submissionAction?.comment,
            dateCreated: collectionSubmission.submissionAction?.dateCreated,
            dateModified: collectionSubmission.submissionAction?.dateModified,
            isAdminRemove: collectionSubmission.submissionAction?.isAdminRemove,
            isResubmit: collectionSubmission.submissionAction?.isResubmit,
            isAutogenerated: collectionSubmission.submissionAction?.isAutogenerated,
            creator: server.schema.roots.first().currentUser as ModelInstance<UserModel>,
        });
    },
});

declare module 'ember-cli-mirage/types/registries/model' {
    export default interface MirageModelRegistry {
        'collection-submission': MirageCollectionSubmission;
    } // eslint-disable-line semi
}

declare module 'ember-cli-mirage/types/registries/schema' {
    export default interface MirageSchemaRegistry {
        'collection-submission': MirageCollectionSubmission;
    } // eslint-disable-line semi
}
