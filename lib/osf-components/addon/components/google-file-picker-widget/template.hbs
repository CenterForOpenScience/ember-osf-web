<div local-class='google-file-picker-container {{if this.isMobile 'mobile'}}'
>
    <div local-class='instruction-container'>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-one'~}}
        </p>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-two'~}}
        </p>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-three'~}}
        </p>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-four'~}}
        </p>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-five'~}}
        </p>
        <p>
            {{~t 'addons.configure.google-file-picker.instructions.line-six'~}}
        </p>
    </div>
    <div local-class='action-container'>
        <button type='button' id='authorize_button' onclick='handleAuthClick()'>{{t 'addons.configure.google-file-picker.select-root-folder'}}</button>
        {{!-- <button  type='button' id='signout_button' onclick='handleSignoutClick()'>{{t 'addons.configure.sign-out'}}</button> --}}
        {{!-- <pre id='content' class='picker-style'></pre> --}}

        <script type='text/javascript'>
            // const SCOPES = ''
            // const CLIENT_ID = ''
            // const API_KEY = '''
            // const APP_ID = 

            let tokenClient;
            let accessToken;
            let pickerInited = false;
            let gisInited = false;



            document.getElementById('authorize_button').style.visibility = 'hidden';
            // document.getElementById('signout_button').style.visibility = 'hidden';

            /**
            * Callback after api.js is loaded.
            */
            function gapiLoaded() {
                gapi.load('client:picker', initializePicker);
            }

            /**
            * Callback after the API client is loaded. Loads the
            * discovery doc to initialize the API.
            */
            async function initializePicker() {
                await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
                pickerInited = true;
                maybeEnableButtons();
            }

            /**
            * Callback after Google Identity Services are loaded.
            */
            function gisLoaded() {
                tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '', // defined later
                })
                gisInited = true;
                maybeEnableButtons();
            }

            /**
            * Enables user interaction after all libraries are loaded.
            */
            function maybeEnableButtons() {
                if (pickerInited && gisInited) {
                document.getElementById('authorize_button').style.visibility = 'visible';
                }
            }

            /**
            *  Sign in the user upon button click.
            */
            function handleAuthClick() {
                tokenClient.callback = async (response) => {
                if (response.error !== undefined) {
                    throw (response);
                }
                accessToken = response.access_token;
                console.log('handleAuthClick', accessToken)
                // document.getElementById('signout_button').style.visibility = 'visible';
                document.getElementById('authorize_button').innerText = 'Refresh';
                await createPicker();
                };

                if (accessToken === null) {
                // Prompt the user to select a Google Account and ask for consent to share their data
                // when establishing a new session.
                tokenClient.requestAccessToken({prompt: 'consent'});
                } else {
                // Skip display of account chooser and consent dialog for an existing session.
                tokenClient.requestAccessToken({prompt: ''});
                }
            }

            /**
            *  Sign out the user upon button click.
            */
            function handleSignoutClick() {
                if (accessToken) {
                google.accounts.oauth2.revoke(accessToken);
                accessToken = null;
                // document.getElementById('content').innerText = '';
                document.getElementById('authorize_button').innerText = 'Authorize';
                // document.getElementById('signout_button').style.visibility = 'hidden';
                }
            }

            /**
            *  Create and render a Picker object for searching images.
            */
            function createPicker() {
                const googlePickerView = new google.picker.DocsView(google.picker.ViewId.DOCS);
                googlePickerView.setSelectFolderEnabled(true);
                googlePickerView.setMimeTypes(MIME_TYPES);
                googlePickerView.setParent(PARENT_ID);
                // viewFolder.setMimeTypes('application/vnd.google-apps.folder');
                // const viewFiles = new google.picker.View(google.picker.ViewId.DOCS);
                // viewFiles.setMimeTypes('image/png,image/jpeg,image/jpg');
                // .addView(viewFiles)

                const picker = new google.picker.PickerBuilder()
                    // .enableFeature(google.picker.Feature.NAV_HIDDEN)
                    // .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                    .enableFeature(IS_MULTIPLE_SELECT ? google.picker.Feature.MULTISELECT_ENABLED : '')
                    .setDeveloperKey(API_KEY)
                    .setAppId(APP_ID)
                    .addView(googlePickerView)
                    .setTitle(TITLE)
                    .setOAuthToken(accessToken)
                    .setCallback(pickerCallback)
                    .build();
                picker.setVisible(true);
            }

            /**
            * Displays the file details of the user's selection.
            * @param {object} data - Containers the user selection from the picker
            */
            async function pickerCallback(data) {
                if (data.action === google.picker.Action.PICKED) {
                    // let text = `Picker response: \n${JSON.stringify(data, null, 2)}\n`;
                    const document = data[google.picker.Response.DOCUMENTS][0];
                    const fileId = document[google.picker.Document.ID];
                    // console.log('fileId', fileId);
                    const res = await gapi.client.drive.files.get({
                        'fileId': fileId,
                        'fields': '*',
                    });
                // ðŸ‘‡ Correctly call the Ember method
                    window.GoogleFilePickerWidget.filePickerCallback(res.result);
                    // text += `Drive API response for first document: \n${JSON.stringify(res.result, null, 2)}\n`;
                    // window.document.getElementById('content').innerText = text;
                }
            }
        </script>
        <script async defer src='https://apis.google.com/js/api.js' onload='gapiLoaded()'></script>
        <script async defer src='https://accounts.google.com/gsi/client' onload='gisLoaded()'></script>
    </div>
</div>