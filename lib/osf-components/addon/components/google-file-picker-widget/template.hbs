<div {{did-insert this.registerComponent}} local-class='google-file-picker-container {{if this.isMobile 'mobile'}}'
>
    {{#if this.isFolderPicker}}
        <div local-class='instruction-container'>
            {{#if this.folderName}}
                <p>
                    <b>
                        {{~t 'addons.configure.google-file-picker.selected-folder'~}}:
                    </b>
                    <span>
                        {{this.folderName}}
                    </span>
                </p>
            {{/if}}
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-one'~}}
            </p>
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-two'~}}
            </p>
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-three'~}}
            </p>
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-four'~}}
            </p>
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-five'~}}
            </p>
            <p>
                {{~t 'addons.configure.google-file-picker.instructions.line-six'~}}
            </p>
        </div>
        <div local-class='action-container'>
            <button class='btn btn-primary btn-medium' local-class='authorize-button' type='button' id='authorize_button' onclick='handleAuthClick()'>{{t 'addons.configure.google-file-picker.select-root-folder'}}</button>
        </div>
    {{/if}}
    <script type='text/javascript'>
        let tokenClient;
        let accessToken;
        let pickerInited = false;
        let gisInited = false;

        /**
        * Callback after api.js is loaded.
        */
        function gapiLoaded() {
            gapi.load('client:picker', initializePicker);
        }

        /**
        * Callback after the API client is loaded. Loads the
        * discovery doc to initialize the API.
        */
        async function initializePicker() {
            await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
            pickerInited = true;
            maybeEnableButtons();
        }

        /**
        * Callback after Google Identity Services are loaded.
        */
        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '', // defined later
            })
            gisInited = true;
            maybeEnableButtons();
        }

        /**
        * Enables user interaction after all libraries are loaded.
        */
        function maybeEnableButtons() {
            if (pickerInited && gisInited && isFolderPicker) {
                document.getElementById('authorize_button').style.visibility = 'visible';
            }
        }

        /**
        *  Sign in the user upon button click.
        */
        function handleAuthClick() {
            tokenClient.callback = async (response) => {
                if (response.error !== undefined) {
                    throw (response);
                }
                accessToken = response.access_token;
                await createPicker();
            };

            if (accessToken === null) {
                // Prompt the user to select a Google Account and ask for consent to share their data
                // when establishing a new session.
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                // Skip display of account chooser and consent dialog for an existing session.
                tokenClient.requestAccessToken({prompt: ''});
            }
        }

        /**
        *  Create and render a Picker object for searching images.
        */
        function createPicker() {
            const googlePickerView = new google.picker.DocsView(google.picker.ViewId.DOCS);
            googlePickerView.setSelectFolderEnabled(true);
            googlePickerView.setMimeTypes(MIME_TYPES);
            googlePickerView.setIncludeFolders(true);
            googlePickerView.setParent(PARENT_ID);

            const picker = new google.picker.PickerBuilder()
                .enableFeature(IS_MULTIPLE_SELECT ? google.picker.Feature.MULTISELECT_ENABLED : '')
                .setDeveloperKey(API_KEY)
                .setAppId(APP_ID)
                .addView(googlePickerView)
                .setTitle(TITLE)
                .setOAuthToken(accessToken)
                .setCallback(pickerCallback)
                .build();
            picker.setVisible(true);
        }

        /**
        * Displays the file details of the user's selection.
        * @param {object} data - Containers the user selection from the picker
        */
        async function pickerCallback(data) {
            if (data.action === google.picker.Action.PICKED) {
                const document = data[google.picker.Response.DOCUMENTS][0];
                const fileId = document[google.picker.Document.ID];
                const res = await gapi.client.drive.files.get({
                    'fileId': fileId,
                    'fields': '*',
                });
                // Correctly call the Ember method
                window.GoogleFilePickerWidget.filePickerCallback(res.result);
            }
        }
    </script>
    <script async defer src='https://apis.google.com/js/api.js' onload='gapiLoaded()'></script>
    <script async defer src='https://accounts.google.com/gsi/client' onload='gisLoaded()'></script>
</div>