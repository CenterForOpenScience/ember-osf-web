<div
    local-class='configured-addon-edit-wrapper'
    data-analytics-scope='Configured Addon Edit'
>
    <div local-class='input-wrapper'>
        <label>
            {{t 'addons.configure.display-name'}}
            <Input
                data-test-display-name-input
                @type='text'
                @value={{this.displayName}}
                @maxlength={{256}}
            />
        </label>
        {{#if this.invalidDisplayName}}
            <span
                data-test-display-name-error
                local-class='display-name-error'
            >
                {{t 'validationErrors.blank'}}
            </span>
        {{/if}}
    </div>
    {{#if this.requiresRootFolder }}
        <div local-class='input-wrapper'>
            <b>
                {{t 'addons.configure.selected-folder'}}
            </b>
            <span>
                {{#if this.selectedFolderDisplayName}}
                    {{this.selectedFolderDisplayName}}
                {{else}}
                    {{t 'addons.configure.no-folder-selected'}}
                {{/if}}
            </span>
        </div>
        <AddonsService::FileManager
            @configuredAddon={{@configuredAddon}}
            @authorizedAccount={{@authorizedAccount}}
            @defaultKwargs={{this.defaultKwargs}}
            @startingFolderId={{this.selectedFolder}}
            as |fileManager|
        >

            <div local-class='current-path'>
                <Button
                    data-test-go-to-root
                    data-analytics-name='Go to root folder'
                    @layout='fake-link'
                    aria-label={{t 'addons.configure.go-to-root'}}
                    {{on 'click' fileManager.goToRoot}}
                >
                    <FaIcon @icon='home' />
                    {{t 'general.home'}}
                </Button>
                {{#each fileManager.currentPath as |pathItem|}}
                    <Button
                        data-test-folder-path-option='{{pathItem.itemName}}'
                        data-analytics-name='Go to ancestor folder'
                        @layout='fake-link'
                        aria-label={{t 'addons.configure.go-to-folder' folderName=pathItem.itemName}}
                        {{on 'click' (fn fileManager.goToFolder pathItem)}}
                    >
                        <FaIcon @icon='chevron-right' />
                        {{pathItem.itemName}}
                    </Button>
                {{/each}}
            </div>
            <table local-class='file-tree-table'>
                <thead>
                    <tr>
                        <th>{{t 'addons.configure.table-headings.folder-name'}}</th>
                        <th>{{t 'addons.configure.table-headings.select'}}</th>
                    </tr>
                </thead>
                <tbody local-class='table-body'>
                    {{#if fileManager.isLoading}}
                        <LoadingIndicator @dark={{true}} />
                    {{else if fileManager.isError}}
                        <tr>
                            <td colspan='2'>{{t 'addons.configure.error-loading-items'}}</td>
                        </tr>
                    {{else}}
                        {{#each fileManager.currentItems as |folder|}}
                            <tr>
                                <td>
                                    {{#if folder.mayContainRootCandidates}}
                                        <Button
                                            data-test-folder-link='{{folder.itemName}}'
                                            data-analytics-name='Go to folder'
                                            @layout='fake-link'
                                            aria-label={{t 'addons.configure.go-to-folder' folderName=folder.itemName}}
                                            {{on 'click' (fn fileManager.goToFolder folder)}}
                                        >
                                            <span local-class='item-name'>
                                                {{#if (or (eq folder.itemType 'FOLDER') (eq folder.itemType 'COLLECTION'))}}
                                                    <FaIcon @icon='folder' />
                                                {{else}}
                                                    <FaIcon @icon='file' />
                                                {{/if}}
                                                {{folder.itemName}}
                                            </span>
                                        </Button>
                                    {{else}}
                                        <span local-class='item-name'>
                                            {{#if (or (eq folder.itemType 'FOLDER') (eq folder.itemType 'COLLECTION'))}}
                                                <FaIcon @icon='folder' />
                                            {{else}}
                                                <FaIcon @icon='file' />
                                            {{/if}}
                                            {{folder.itemName}}
                                        </span>
                                    {{/if}}
                                </td>
                                <td>
                                    {{#if folder.canBeRoot}}
                                        <input
                                            data-test-root-folder-option='{{folder.itemName}}'
                                            data-analytics-name='Select folder'
                                            type='radio'
                                            name='folder'
                                            value={{folder.itemName}}
                                            checked={{eq folder.itemId this.selectedFolder}}
                                            aria-label={{t 'addons.configure.select-folder' folderName=folder.itemName}}
                                            {{on 'change'(fn this.selectFolder folder)}}
                                        >
                                    {{/if}}
                                </td>
                            </tr>
                        {{else}}
                            <tr>
                                <td colspan='2'>{{t 'addons.configure.no-folders'}}</td>
                            </tr>
                        {{/each}}
                        {{#if fileManager.hasMore}}
                            <tr>
                                <td colspan='2'>
                                    <Button
                                        data-test-load-more-folders
                                        data-analytics-name='Load more folders'
                                        @layout='fake-link'
                                        {{on 'click' fileManager.getMore}}
                                    >
                                        {{t 'general.load_more'}}
                                    </Button>
                                </td>
                            </tr>
                        {{/if}}
                    {{/if}}
                </tbody>
            </table>
        </AddonsService::FileManager>
    {{/if}}
    <div local-class='footer-buttons-wrapper'>
        <Button
            data-test-root-folder-save
            data-analytics-name='Save selected folder'
            @type='primary'
            {{on 'click' (fn @onSave this.onSaveArgs)}}
        >
            {{t 'general.save'}}
        </Button>
        <Button
            data-test-root-folder-cancel
            data-analytics-name='Cancel'
            @type='secondary'
            {{on 'click' @onCancel}}
        >
            {{t 'general.cancel'}}
        </Button>
    </div>
    <div>
        <button type='button' id='authorize_button' onclick='handleAuthClick()'>{{t 'addons.configure.authorize'}}</button>
        <button  type='button' id='signout_button' onclick='handleSignoutClick()'>{{t 'addons.configure.sign-out'}}</button>
        <button  type='button' id='open_button' onclick='createPicker()'>{{t 'addons.configure.open'}}</button>

        <pre id='content' class='picker-style'></pre>

        <script type='text/javascript'>
        /* exported gapiLoaded */
        /* exported gisLoaded */
        /* exported handleAuthClick */
        /* exported handleSignoutClick */

        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        const SCOPES = 'https://www.googleapis.com/auth/drive.file'

        // TODO(developer): Set to client ID and API key from the Developer Console
        const CLIENT_ID = '';
        const API_KEY = '';

        // TODO(developer): Replace with your own project number from console.developers.google.com.
        const APP_ID = '';

        let tokenClient;
        let accessToken;

        console.log('initialize', accessToken)
        let pickerInited = false;
        let gisInited = false;



        document.getElementById('authorize_button').style.visibility = 'hidden';
        document.getElementById('signout_button').style.visibility = 'hidden';
        document.getElementById('open_button').style.visibility = 'visible';

        /**
        * Callback after api.js is loaded.
        */
        function gapiLoaded() {
            gapi.load('client:picker', initializePicker);
        }

        /**
        * Callback after the API client is loaded. Loads the
        * discovery doc to initialize the API.
        */
        async function initializePicker() {
            await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
            pickerInited = true;
            maybeEnableButtons();
        }

        /**
        * Callback after Google Identity Services are loaded.
        */
        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
            client_id: CLIENT_ID,
            scope: SCOPES,
            callback: '', // defined later
            })
            gisInited = true;
            maybeEnableButtons();
        }

        /**
        * Enables user interaction after all libraries are loaded.
        */
        function maybeEnableButtons() {
            if (pickerInited && gisInited) {
            document.getElementById('authorize_button').style.visibility = 'visible';
            }
        }

        /**
        *  Sign in the user upon button click.
        */
        function handleAuthClick() {
            tokenClient.callback = async (response) => {
            if (response.error !== undefined) {
                throw (response);
            }
            accessToken = response.access_token;
            console.log('handleAuthClick', accessToken)
            document.getElementById('signout_button').style.visibility = 'visible';
            document.getElementById('authorize_button').innerText = 'Refresh';
            document.getElementById('open_button').style.visibility = 'visible';
            await createPicker();
            };

            if (accessToken === null) {
            // Prompt the user to select a Google Account and ask for consent to share their data
            // when establishing a new session.
            tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
            // Skip display of account chooser and consent dialog for an existing session.
            tokenClient.requestAccessToken({prompt: ''});
            }
        }

        /**
        *  Sign out the user upon button click.
        */
        function handleSignoutClick() {
            if (accessToken) {
            google.accounts.oauth2.revoke(accessToken);
            accessToken = null;
            document.getElementById('content').innerText = '';
            document.getElementById('authorize_button').innerText = 'Authorize';
            document.getElementById('signout_button').style.visibility = 'hidden';
            document.getElementById('open_button').style.visibility = 'hidden';
            }
        }

        /**
        *  Create and render a Picker object for searching images.
        */
        function createPicker() {
            // const viewFolder = new google.picker.DocsView(google.picker.ViewId.FOLDERS);
            // viewFolder.setSelectFolderEnabled(true);
            // viewFolder.setMimeTypes('application/vnd.google-apps.folder');
               // .addView(viewFolder)

            const viewFiles = new google.picker.View(google.picker.ViewId.DOCS);
            viewFiles.setMimeTypes('image/png,image/jpeg,image/jpg');

            const picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setDeveloperKey(API_KEY)
                .setAppId(APP_ID)
                .addView(viewFiles)
                .setTitle('This is the title for Yuhuai')
                .setOAuthToken(accessToken)
                .setCallback(pickerCallback)
                .build();
            picker.setVisible(true);
        }

        /**
        * Displays the file details of the user's selection.
        * @param {object} data - Containers the user selection from the picker
        */
        async function pickerCallback(data) {
            if (data.action === google.picker.Action.PICKED) {
            let text = `Picker response: \n${JSON.stringify(data, null, 2)}\n`;
            const document = data[google.picker.Response.DOCUMENTS][0];
            const fileId = document[google.picker.Document.ID];
            console.log('fileId', fileId);
            const res = await gapi.client.drive.files.get({
                'fileId': fileId,
                'fields': '*',
            });
            text += `Drive API response for first document: \n${JSON.stringify(res.result, null, 2)}\n`;
            window.document.getElementById('content').innerText = text;
            }
        }
        </script>
        <script async defer src='https://apis.google.com/js/api.js' onload='gapiLoaded()'></script>
        <script async defer src='https://accounts.google.com/gsi/client' onload='gisLoaded()'></script>
    </div>

</div>
